class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& arr) {
        
       // optimal approach 
	int n = arr.size();
	sort(arr.begin(),arr.end());

	vector<vector<int>>ans;
    //in single traversal we are making new intervals 
	for(int i = 0; i < n; i++)
	{
		if(ans.empty() || arr[i][0] > ans.back()[1])
		{
			ans.push_back(arr[i]);
		}
		else
		{   //updating the last element in order to expend the boundary of the inrterval 
			ans.back()[1] = max(ans.back()[1],arr[i][1]);
		}
	}
	return ans;
    }
};
	
	
